@type
# The type signature of map SHOULD be:
#   map :: (a -> b) -> [a] -> [b]
# However, I don't yet support generics
map :: * -> * -> *
do  :: ? -> *  # should be: * -> ? -> *
               # or better: (? -> a) -> ? -> a

# ternary :: Bool -> (a -> b) -> (a -> b) -> a -> b
ternary :: Bool -> * -> * -> * -> *

# filter :: (a -> Bool) -> [a] -> [a]
filter :: * -> * -> *

@alias
map     :: morloc_map
do      :: morloc_do
ternary :: morloc_ternary
filter  :: morloc_filter


@source R

morloc_map <- function(f, x){
    lapply(x, f)
}

morloc_do <- function(FUN, ...){
    FUN(...)
}

morloc_ternary <- function(x, f, g, ...){
    if(x){
        f(...)
    } else {
        g(...)
    }
}

morloc_filter <- Filter

@source sh

morloc_map (){
    fun=$1
    file=$2
    while read x
    do
        $fun $x
    done < $file
}

morloc_do() {
    $@
}

morloc_ternary() {
    condition=$1 ; shift
    a=$1         ; shift
    b=$1         ; shift
    if [[ $condition == "true" ]]
    then
        fun=$a
    else
        fun=$b
    fi
    shift
    shift
    shift
    $fun $@
}

morloc_filter() {
    # TODO: a line needn't always represent an element in a list
    while read line
    do
       [[ $($1 $line) == 'true' ]] && echo $line 
    done < $2
}

@source py

morloc_map = map

def morloc_do(FUN, *args):
    return FUN(*args)

def morloc_ternary(x, f, g, *args, **kwargs):
    fun = f if x else g
    return fun(*args, **kwargs)

def morloc_filter(f, xs):
    return list(filter(f,xs))
