@source R

# Convert native data structure to file or literal
native_to_universal <- function(x, type, outdir){
  f <- NULL
  if(is.atomic(x) && length(x) == 1){
    f <- as.character(x)
  } else if(type == "NULL"){
    f <- NULL
  } else {
    f <- tempfile(pattern="m1_R_", tmpdir=outdir, fileext=".out")
    require(readr)
    if(is.data.frame(x)){
      write_tsv(x, path=f)
    } else if(is.list(x)) {
      write(unlist(x), file=f, ncolumns=1)
    } else if(is.vector(x)) {
      write(x, file=f, ncolumns=1)
    } else if(is.null(x)) {
      f <- NULL 
    } else {
      msg = sprintf("R: Cannot export object of class '%s'", class(x))
      warning(msg)
    }
  }
  f
}

# Convert text or binary to native data structure
number_types  <- c("Int", "[Int]")
string_types  <- c("String", "[String]", "File")
logical_types <- c("Bool", "[Bool]")
universal_to_native <- function(x, type){
  if( any(type %in% number_types) ){
    d <- as.numeric(x)
  }
  else if( any(type %in% string_types) ){
    d <- as.character(x)
  }
  else if( any(type %in% logical_types) ){
    d <- as.logical(x)
  }
  else if( type == "NULL" ){
    d <- NULL
  }
  else if( type == "Text" ){
    d <- read_lines(x)
  }
  else {
    warning("Blindly reading unknown type as Table or Vector")
    d <- read_tsv(x)
    if(ncol(d) == 1){
      d <- d[[1]]
    }
  }
  d
}



@source sh

native_to_universal (){
    $@
}

universal_to_native (){
    x=$1
    vtype=$2
    if [[ $vtype == "Int"    ||
          $vtype == "String" ||
          $vtype == "Num"    ||
          $vtype == "Bool"   ||
          $vtype == "File" ]]
    then
        echo $x
    else
        cat $x
    fi
}
