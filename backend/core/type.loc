@source R

# Convert native data structure to file or literal
native_to_universal <- function(x, type, outdir){
  f <- NULL
  if(is.atomic(x) && length(x) == 1){
    f <- as.character(x)
  } else if(type == "NULL"){
    f <- NULL
  } else {
    f <- tempfile(pattern="m1_R_", tmpdir=outdir, fileext=".out")
    require(readr)
    if(is.data.frame(x)){
      write_tsv(x, path=f)
    } else if(is.list(x)) {
      write(unlist(x), file=f, ncolumns=1)
    } else if(is.vector(x)) {
      write(x, file=f, ncolumns=1)
    } else if(is.null(x)) {
      f <- NULL 
    } else {
      msg = sprintf("R: Cannot export object of class '%s'", class(x))
      warning(msg)
    }
  }
  f
}

# Convert text or binary to native data structure
number_types  <- c("Int", "[Int]")
string_types  <- c("String", "[String]", "File")
logical_types <- c("Bool", "[Bool]")
universal_to_native <- function(x, type){
  if( any(type %in% number_types) ){
    d <- as.numeric(x)
  }
  else if( any(type %in% string_types) ){
    d <- as.character(x)
  }
  else if( any(type %in% logical_types) ){
    d <- as.logical(x)
  }
  else if( type == "NULL" ){
    d <- NULL
  }
  else if( type == "Text" ){
    d <- read_lines(x)
  }
  else {
    warning("Blindly reading unknown type as Table or Vector")
    d <- read_tsv(x)
    if(ncol(d) == 1){
      d <- d[[1]]
    }
  }
  d
}



@source sh

native_to_universal (){
    $@
}

universal_to_native (){
    x=$1
    vtype=$2
    if [[ $vtype == "Int"    ||
          $vtype == "String" ||
          $vtype == "Num"    ||
          $vtype == "Bool"   ||
          $vtype == "File" ]]
    then
        echo $x
    else
        cat $x
    fi
}



@source py

import tempfile

# Convert native data structure to file or literal
def native_to_universal(x, typ):
  f = None
  if typ in ("String", "File"):
    f = str(x)
  elif typ == "Int":
    f = int(x)
  elif typ == "Num":
    f = float(x)
  elif typ == "Bool":
    f = 1 if x else 0
  else:
    tmp = tempfile.NamedTemporaryFile(
        prefix="py_%s" % typ,
        dir=outdir,
        delete=False
    )
    f <- tmp.name

    if isinstance(x, dict):
        x = x.items()

    if isinstance(x, (list, set)):
        for e in x:
            if(isinstance(e, str)):
                tmp.write(e)
            else:
                tmp.write("\t".join([str(xx) for xx in x]))
    else:
      msg = sprintf("Py: Cannot export object of class '%s'", class(x))
      warning(msg)
  return f

# Convert text or binary to native data structure
number_types  = ("Int", "[Int]")
string_types  = ("String", "[String]", "File")
logical_types = ("Bool", "[Bool]")
caster = {
    "Int":int,
    "Num":float,
    "String":str,
    "File":str,
    "Bool":bool
}
def universal_to_native(x, type):
    if typ in caster:
        d = caster[typ](x)
    elif typ == "Text":
        with open(x, "r") as f:
            d = f.readlines()
    elif typ[0] == '[':
        with open(x, "r") as f:
            d = f.readlines()
        typ = typ[1:-1]
        if typ in caster:
            cast = caster[typ]
            d = [cast(e) for e in d]
    else:
        d = str(x)
    return d
