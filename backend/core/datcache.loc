@type
datcache_chk :: String -> Int -> Bool
datcache_get :: String -> Int -> *
datcache_put :: String -> Int -> * -> NULL
datcache_del :: String -> Int -> NULL


@source R

require(readr)

datcache_path <- function(mid, uid=NULL, outdir="cache") {
    if(is.null(uid)){
        file.path(outdir, paste0(mid, ".rdat"))
    } else {
        file.path(outdir, paste0(mid, "_", uid, ".rdat"))
    }
}

# string -> bool
datcache_chk <- function(mid, uid=NULL, ...) {
    file.exists(datcache_path(mid, uid, ...))
}

# null -> text
datcache_get <- function(mid, uid=NULL, ...) {
    read_rds(datcache_path(mid, uid, ...))
}

# text -> text
datcache_put <- function(mid, dat, uid=NULL, ...) {
    write_rds(dat, datcache_path(mid, uid, ...))
}

datcache_del <- function(mid, uid=NULL, ...) {
    file.remove(datcache_path(mid, uid, ...))
}


@source py

import pickle

def datcache_path(mid, uid=None, outdir=""):
    if uid:
        path = os.path.join(outdir, "%s_%s.pickle" % (mid, str(uid)))
    else:
        path = os.path.join(outdir, "%s.pickle" % mid)
    return path

# datcache_chk :: String -> Int -> Bool
def datcache_chk(*args, **kwargs):
    path = datcache_path(*args, **kwargs)
    return os.path.exists(path)

# datcache_get :: String -> Int -> *
def datcache_get(*args, **kwargs):
    path = datcache_path(*args, **kwargs)
    with open(path, 'rb') as f:
        dat = pickle.load(f)
    return dat

# datcache_put :: String -> Int -> * -> NULL
def datcache_put(mid, dat, **kwargs):
    path = datcache_path(mid, **kwargs)
    with open(path, 'wb') as f:
        pickle.dump(dat, f, pickle.HIGHEST_PROTOCOL)

# datcache_del :: String -> Int -> NULL
def datcache_del(*args, **kwargs):
    path = datcache_path(*args, **kwargs)
    os.remove(path)


@source sh

cachedir=$outdir/cache
if [[ ! -d $cachedir ]]
then
    mkdir $cachedir || echo "Cannot make cache directory" &> /dev/null
fi

# $1: mid | $2: uid
datcache_chk() {
    if [[ -z $2 ]]
    then
        test -d $cachedir && test -f $cachedir/$1.dat
    else
        test -d $cachedir && test -f $cachedir/$1_$2.dat
    fi
}

# $1: mid | $2: uid
datcache_get() {
    if [[ -z $2 ]]
    then
        cat $cachedir/$1.dat | more
    else
        cat $cachedir/$1_$2.dat | more
    fi
}

# $1: mid | $2: tempfile | $3: uid
datcache_put() {
    if [[ -z $3 ]]
    then
        ln $2 $cachedir/$1.dat
    else
        ln $2 $cachedir/$1_$3.dat
    fi
}

# $1: mid | $2: uid
datcache_del() {
    if [[ -z $2 ]]
    then
        rm $cachedir/$1.dat
    else
        rm $cachedir/$1_$2.dat
    fi
}


