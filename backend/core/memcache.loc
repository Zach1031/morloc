@type
datcache_chk :: String -> Int -> Bool
datcache_get :: String -> Int -> *
datcache_put :: String -> Int -> * -> NULL
datcache_del :: String -> Int -> NULL

@source R

.memcache_data <- new.env()

memcache_chk <- function(mid, uid=NULL) {
    if(is.null(uid)){
        exists(mid, .memcache_data, inherits=FALSE)
    } else {
        exists(mid, .memcache_data, inherits=FALSE) &&
        exists(as.character(uid), .memcache_data[[mid]], inherits=FALSE)
    }
}

memcache_get <- function(mid, uid=NULL) {
    if(is.null(uid)){
        .memcache_data[[mid]]
    } else {
        .memcache_data[[mid]][[as.character(uid)]]
    }
}

memcache_put <- function(mid, dat, uid=NULL) {
    if(is.null(uid)){
        .memcache_data[[mid]] = dat
    } else {
        if(!exists(mid, .memcache_data, inherits=FALSE)){
            .memcache_data[[mid]] = new.env()
        }
        .memcache_data[[mid]][[as.character(uid)]] = dat
    }
}

memcache_del <- function(mid, uid=NULL) {
    if(is.null(uid)){
        rm(mid, envir=.memcache_data)
    } else {
        rm(list=as.character(uid), envir=.memcache_data[[mid]])
    }
}


@source py

memcache_data = {}

# datcache_chk :: String -> Int -> Bool
def memcache_chk(mid, uid=None):
    if uid:
        try:
            memcache_data[mid][uid]
        except:
            return False
    else:
        try:
            memcache_data[mid] 
        except:
            return False
    return True

# datcache_get :: String -> Int -> *
def memcache_get(mid, uid=NULL):
    if uid:
        return memcache_data[mid][uid] 
    else:
        return memcache_data[mid]

# datcache_put :: String -> Int -> * -> NULL
memcache_put <- function(mid, dat, uid=None):
    if uid:
        memcache_data[mid][uid] = dat
    else:
        memcache_data[mid] = dat

# datcache_del :: String -> Int -> NULL
def memcache_del (mid, uid=NULL):
    if uid:
        memcache_data[mid][uid] = None
    else:
        memcache_data[mid] = None
