@type
null    :: ? -> void
id      :: * -> *
true    :: ? -> Bool
false   :: ? -> Bool
and     :: Bool -> Bool -> Bool
or      :: Bool -> Bool -> Bool
not     :: Bool -> Bool
any     :: ? -> Bool
all     :: ? -> Bool
nothing :: void -> void

@alias
null    :: loc_null
id      :: loc_id
true    :: loc_true
false   :: loc_false
and     :: loc_and
or      :: loc_or
not     :: loc_not
any     :: loc_any
all     :: loc_all
nothing :: loc_nothing


@source R

loc_null <- function(...) {
    list(...) # to force evaluation of inputs
    NULL      # but return nothing
}

loc_id <- function(x) { x }

loc_true <- function(...) { TRUE }

loc_false <- function(...) { TRUE }

loc_and <- function(a, b) { a && b }

loc_or  <- function(a, b) { a || b }

loc_not <- function(a) { ! a }

loc_any <- any

loc_all <- all

loc_nothing <- function() { NULL }


@source sh

loc_null() {
    echo -n
}

loc_id() {
    cat "$1" 2> /dev/null || echo "$1"
}

loc_true() {
    true
}

loc_false() {
    false
}

loc_and() {
    test $1 -eq 1 && test $2 -eq 1
}

loc_or() {
    test $1 -eq 1 || test $2 -eq 1
}

loc_not() {
    test $1 -ne 1
}

loc_any() {
    is_true=0
    for j in "$@"
    do
        if test $j -eq 1
        then
            is_true=1
            break
        fi
    done
    test $is_true -eq 1
}

loc_all() {
    is_true=1
    for j in $@
    do
        if test $j -eq 0 
        then
            is_true=0
            break
        fi
    done
    test $is_true -eq 1
}

loc_nothing() {
    echo -n
}


@source py

def loc_null(*args, **kwargs):
    pass

def loc_id(x):
    return x

def loc_true(*args, **kwargs):
    return True

def loc_false(*args, **kwargs):
    return False

def loc_and(a, b):
    return( bool(a) and bool(b) )

def loc_or(a, b):
    return( bool(a) or bool(b) )

def loc_not(a):
    return (not a)

def loc_all(*args):
    return all(args)

def loc_any(*args):
    return any(args)

def loc_nothing():
    pass
