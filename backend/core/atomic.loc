@type
null :: MULTI -> NULL
id :: * -> *

true :: MULTI -> Bool
false :: MULTI -> Bool

and :: Bool  -> Bool -> Bool
all :: MULTI -> Bool
or  :: Bool  -> Bool -> Bool
any :: MULTI -> Bool
not :: Bool  -> Bool

@source R

null <- function(...) {
    list(...) # to force evaluation of inputs
    NULL      # but return nothing
}

id <- function(x) { x }

true <- function(...) { TRUE }

false <- function(...) { TRUE }

nothing <- function() { NULL }

and <- function(a, b) { a && b }

or  <- function(a, b) { a || b }

not <- function(a) { ! a }

@source sh

# Text -> NULL
null() {
    cat "$@" > /dev/null
}

id() {
    cat
}

nothing() {
    echo -n
}

and() {
    test $1 -eq 1 && test $2 -eq 1
}

or() {
    test $1 -eq 1 || test $2 -eq 1
}

not() {
    test $1 -ne 1
}

all() {
    is_true=1
    for j in $@
    do
        if test $j -eq 0 
        then
            is_true=0
            break
        fi
    done
    test $is_true -eq 1
}

any() {
    is_true=0
    for j in "$@"
    do
        if test $j -eq 1
        then
            is_true=1
            break
        fi
    done
    test $is_true -eq 1
}

@source py

# null :: MULTI -> NULL
def null(args*, kwargs**):
    return None

# id :: * -> *
def id(x):
    return x

# true :: MULTI -> Bool
def true(args*, kwargs**):
    return True

# false :: MULTI -> Bool
def false(args*, kwargs**):
    return False

# and :: Bool  -> Bool -> Bool
def loc_and(a, b):
    return( bool(a) and bool(b) )

# all :: MULTI -> Bool
def loc_all(*args):
    return all(args)

# or  :: Bool  -> Bool -> Bool
def loc_or(a, b):
    return( bool(a) or bool(b) )

# any :: MULTI -> Bool
def loc_any(*args):
    return any(args)

# not :: Bool  -> Bool
def loc_not(a):
    return (not a)
