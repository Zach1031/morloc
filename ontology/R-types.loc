source "R" from "R-base.R" (
  # unpackers
    "unpackTable"
  , "unpackNumeric"
  , "unpackCharacter"
  , "unpackLogical"
  , "unpackList"
  , "unpackMatrix"
  # packers
  , "packTable"
  , "packNumeric"
  , "packCharacter"
  , "packLogical"
  , "packList"
  , "packMatrix"
)

# For each of these language-specific types, exactly one packing and unpacking
# function must exist:

packList      R :: packs => List      -> JSON
packNumeric   R :: packs => Numeric   -> JSON
packCharacter R :: packs => Character -> JSON
packLogical   R :: packs => Logical   -> JSON
packMatrix    R :: packs => Matrix    -> JSON
packDataFrame R :: packs => DataFrame -> JSON
packDataTable R :: packs => DataTable -> JSON

packGeneric   R :: packs   => a    -> JSON
unpackGeneric R :: unpacks => JSON -> a

unpackList      R :: unpacks => JSON -> List
unpackNumeric   R :: unpacks => JSON -> Numeric
unpackCharacter R :: unpacks => JSON -> Character
unpackLogical   R :: unpacks => JSON -> Logical
unpackMatrix    R :: unpacks => JSON -> Matrix
unpackDataFrame R :: unpacks => JSON -> DataFrame
unpackDataTable R :: unpacks => JSON -> DataTable

# # For each general function, there are zero or more specific functions:
# foo   :: A -> B  # general form of the function
# foo L :: X -> Y  # specialization for language L, using L types X and Y
# foo M :: _ -> Z  # for language M, using default type for A and M type Z
# # currently _ is not supported

# These specialized declarations are not always necessary. They may be omitted
# if a function does not interact with foreigners or if all the types it uses
# follow the default patterns (i.e., can be packed and unpcked with the generic
# serializers).
