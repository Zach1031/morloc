@type
a_int :: void -> Int
a_str :: void -> String
a_arr :: void -> [Int]


@path
a_int:py a_str:py a_arr:py
# a_int:sh a_str:sh a_arr:sh
# a_int:R  a_str:R  a_arr:R


@export
a_int:py as int_py
a_str:py as str_py
a_arr:py as arr_py
# a_int:sh as int_sh
# a_str:sh as str_sh
# a_arr:sh as arr_sh
# a_int:R  as int_R
# a_str:R  as str_R
# a_arr:R  as arr_R


@lang
a_arr:py,a_int:py,a_str:py :: py
# a_arr:sh,a_int:sh,a_str:sh :: sh
# a_arr:R,a_int:R,a_str:R :: R


@source py
def a_int():
    return 5

def a_str():
    return "hi"

def a_arr():
    return [1,2]

# @source sh
# a_int (){
#     echo 5
# }
#
# a_str (){
#     echo "hi"
# }
#
# a_arr (){
#     echo -e "1\n2"
# }
#
# @source R
# a_int <- function(){
#     5
# }
#
# a_str <- function(){
#     "hi"
# }
#
# a_arr <- function(){
#     c(1,2)
# }
