@include
core/type
core/atomic

@type
iid :: Int -> Int
nid :: Num -> Num
sid :: String -> String
bid :: Bool -> Bool
tid :: Text -> Text
read :: File -> Text

@path
IntTest    :: iid:py . iid:sh . iid:R . iid:py . 42
NumTest    :: nid:py . nid:sh . nid:R . nid:py . 0.42
StringTest :: sid:py . sid:sh . sid:R . sid:py . "fourty-two"
BoolTest   :: bid:py . bid:sh . bid:R . bid:py . 1
TextTest   :: tid:py . tid:sh . tid:R . tid:py . read . "test.txt"

@export
IntTest/iid:py    as Int
NumTest/nid:py    as Num
StringTest/sid:py as String
BoolTest/bid:py   as Bool
TextTest/tid:py   as Text

@lang
read :: py

iid:R  :: R
iid:sh :: sh
iid:py :: py

nid:R  :: R
nid:sh :: sh
nid:py :: py

sid:R  :: R
sid:sh :: sh
sid:py :: py

bid:R  :: R
bid:sh :: sh
bid:py :: py

tid:R  :: R
tid:sh :: sh
tid:py :: py

@source R
iid <- function(x) { x }
nid <- function(x) { x }
sid <- function(x) { x }
bid <- function(x) { x }
tid <- function(x) { x }

@source sh
iid(){
    echo "$1"
}
nid(){
    echo "$1"
}
sid(){
    echo "$1"
}
bid(){
    echo "$1"
}
tid(){
    cat "$1"
}

@source py
def read(x):
    with open(x, "r") as f:
        d = [s.rstrip() for s in f.readlines()]
    return d
def iid(x):
    return x
def nid(x):
    return x
def sid(x):
    return x
def bid(x):
    return x
def tid(x):
    return x
