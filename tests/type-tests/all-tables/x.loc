@include
core/atomic

@type
iid :: [[Int]]    -> [[Int]]
nid :: [[Num]]    -> [[Num]]
sid :: [[String]] -> [[String]]
bid :: [[Bool]]   -> [[Bool]]

itov :: Int -> [[Int]]
ntov :: Num -> [[Num]]
stov :: String -> [[String]]
btov :: Bool -> [[Bool]]

@path
IntTest    :: iid:py . iid:sh . iid:R . iid:py . itov . 42
NumTest    :: nid:py . nid:sh . nid:R . nid:py . ntov . 0.42
StringTest :: sid:py . sid:sh . sid:R . sid:py . stov . "fourty-two"
BoolTest   :: bid:py . bid:sh . bid:R . bid:py . btov . TRUE

@export
IntTest/iid:py    as Int
NumTest/nid:py    as Num
StringTest/sid:py as String
BoolTest/bid:py   as Bool

@lang
read :: py


itov ,
ntov ,
stov ,
btov :: sh

iid:R  :: R
iid:sh :: sh
iid:py :: py

nid:R  :: R
nid:sh :: sh
nid:py :: py

sid:R  :: R
sid:sh :: sh
sid:py :: py

bid:R  :: R
bid:sh :: sh
bid:py :: py

@alias sh
itov ,
ntov ,
stov ,
btov :: tablate

@source R
iid <- function(x) { x }
nid <- function(x) { x }
sid <- function(x) { x }
bid <- function(x) { x }

@source sh
iid(){
    cat "$1"
}
nid(){
    cat "$1"
}
sid(){
    cat "$1"
}
bid(){
    cat "$1"
}

tablate(){
    echo -e "$1\t$1"
    echo -e "$1\t$1"
    echo -e "$1\t$1"
}

@source py
def iid(x):
    return x
def nid(x):
    return x
def sid(x):
    return x
def bid(x):
    return x
