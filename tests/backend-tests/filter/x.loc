@include
core/control

@type
odd :: Int -> Bool
c :: ? -> [Int]
filter :: * -> * -> [Int]

@path R
A :: filter . &( odd . $1 ) <c>
B :: filter . &( odd . $1 ) <c>
C :: filter . &( odd . $1 ) <c>


X :: c . 1 2 3 4 5

@lang
c :: R
A/filter,A/odd :: R
B/filter,B/odd :: sh
C/filter,C/odd :: py

@export
A/filter as R
B/filter as sh
C/filter as py

@source R
odd <- function(x){ x %% 2 != 0}

@source sh
odd (){
    x=$1
    [[ $(( x % 2 )) -ne 0 ]] && echo 'true' || echo 'false'    
}

@source py
def odd(x):
    return x % 2 != 0
