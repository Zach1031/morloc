-- import pybase (add)
add Py :: "float" -> "float" -> "float"
add :: Num -> Num -> Num

export f1
export f2
export f3
export f4
export f5a
export f5b
export f6
export f7
export f8
export f9
export f10

k = 42
m = 20
n = 22
z = 99

-- a function can use terms from the global scope
f1 = k

-- a function's parameters may shadow terms from the global scope
f2 m = m

-- a function may use terms from its where-scope
f3 = x where
    x = 42

-- terms in the function's where-scope may shadow global terms
f4 = z where
    z = 42

-- terms in the function's where-scope are unordered and share scope
f5b = x where
    x = add a b
    a = 1
    b = 41

-- where scopes may be nested
f6 = x where
    x = y where
        y = 42

-- where-scopes inherit the scope of their parent
f7 = x where
    x = y where
        y = add a b
        a = 1
    b = 41

-- where-scopes inherit the scope of all their ancestors
f8 = x where
    x = y where
        y = z where
            z = add n (add a b)
            a = 1
        b = 2
    c = 19

-- cousins do not interfere with one another
f9 = x where
    x = add a b
    a = add 19 c where
        c = 1
    b = add 1 c where
        c = 21

-- functions with or without signatures may be defined in the where-scope
f10 = bar (bif 2) where

    bif x = add x 10

    bar :: Num -> Num
    bar x = add x 30

-- -- imports are allowed in where-scopes
-- -- FIXME: imports and sources should be legal in where statements
-- -- eventually, but I don't want to worry about it yet
-- f11 :: Num
-- f11 = x where
--     import pybase (sub)
--     x = sub 44 2
--
-- -- source statements are allowed in where-scopes
-- f12 :: Num
-- f12 = theAnswer where
--     source py from "theAnswer.py" (theAnswer)
--     theAnswer :: Num
--     theAnswer py :: "int"
--
-- -- should break! The `m` in `add m 22` could be 20 or the recursive value `add m 22`:
-- --   add (add( ... (add m 22) ...)) 
-- -- of course this never terminates, but it should be perfectly legal
-- m = 20
-- f10 :: Num
-- f10 = m where
--     m = add m 22
