export ceiling
export rand_uniform

source "R" (
    "runif" as rand_uniform
  , "ceiling"
);

# source "Foolang" from "down/here" ( "foo" as foolu );
#
# import bill/bar as b
#
# from belteshazzar/baz import (spook, creep)

# impose a type signature on the imported function rand_uniform
rand_uniform :: n:Int, a:Num, b:Num -> xs:[c:Num] where (
    n > 0
  , len xs == n
  , c >= a
  , c <= b
);

# type signatures for ceiling (NOTE: adding constraints is optional)
ceiling :: [Num] -> [Int];


# # A type signature for the Morloc function sample_index
# sample_index
#   :: n:Int      # number of elements to sample
#   ,  size:Int   # maximum value
#   -> xs:[x:Int] # list of unique integers
#   where (
#       n >= 0
#     , size >= n
#     , len xs == n
#     , x > 0
#     , x <= size
#     , len (uniq xs) == len xs
#   );
# sample_index n size = ceiling (rand_uniform n 0 size);

# A simple wrapper specializing the imported rand_uniform function
rand :: Int -> [Num];
rand n = rand_uniform n 0.0 1.0;

# y = True ;
