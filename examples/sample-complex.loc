export ceiling
export rand_uniform
export sum
export transpose
export nrow
export roll
export len
export test

source "R" (
    "runif" as rand_uniform
  , "sum"
  , "ceiling"
  , "t" as transpose
  , "nrow"
);

import "rbase";
import "pybase";
source "py" ("len")

# impose a type signature on the imported function rand_uniform
rand_uniform :: n:Int, a:Num, b:Num -> xs:[c:Num] where (
    n > 0
  , len xs == n
  , c >= a
  , c <= b
);
rand_uniform R :: Numeric, Numeric, Numeric -> Numeric;

sum :: [Num] -> Num;
# no R type defined, the generics packers are fine

ceiling :: [Num] -> [Int];
# no R type defined, the generics packers are fine

transpose :: Matrix a -> Matrix a;
transpose R :: Matrix -> Matrix;

nrow :: Table -> Int;
nrow R :: DataFrame -> Numeric;

roll :: Int, Int -> [Int];
roll n d = ceiling (rand_uniform n 0.0 d);

# I should add a typeclass for things with length
len :: a -> Int;

test :: Int, Int -> Int;
test n = len (roll n (sum [1,2,3])); 
