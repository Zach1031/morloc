export ceiling
export rand_uniform
export sum
export transpose
export nrow
export roll
export len
export test
export fibonocci # from "math"

source "R" (
    "runif" as rand_uniform
  , "sum"
  , "ceiling"
  , "t" as transpose
  , "nrow"
);

import "math"
import "rbase";
import "pybase";
source "py" ("len")

-- impose a type signature on the imported function rand_uniform
rand_uniform :: n:Int, a:Num, b:Num -> xs:[c:Num] where (
    n > 0
  , len xs == n
  , c >= a
  , c <= b
);
-- no R type defined, the generic packers are fine

sum :: [Num] -> Num;
sum R :: "numeric" -> "numeric";

ceiling :: [Num] -> [Int];
ceiling R :: "numeric" -> "integer";

transpose :: Matrix a m n -> Matrix a n m;
transpose R :: Matrix a m n -> Matrix a n m;

nrow :: Table -> Int;
nrow R :: "data.frame" -> "integer";

roll :: Int, Int -> [Int];
roll n d = ceiling (rand_uniform n 0.0 d);

-- I should add a typeclass for things with length
len :: a -> Int;

test :: Int -> Int;
test n = len (roll (pow n 2) (sum [1,2,3])); 
