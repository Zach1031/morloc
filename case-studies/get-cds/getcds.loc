@type
readGFF :: File -> Table
split :: Table -> [Table]
extract :: Table -> File -> String
merge :: [String] -> String
translate :: String -> String

@path
null . translate . merge . map .
  &( extract . $1 *genome )
   ( split_models . readGFF . *models )

protein :: 'foo.faa'
genome  :: 'foo.fna'
models  :: 'foo.gff'

@lang
* :: sh
map,split_models,readGFF :: R

@include
core/control

@source R
library(magrittr)

readGFF <- function(x){
    require(readr)
    gff_cols <- c('seqid', 'source', 'type', 'start',
    'stop', 'score', 'strand', 'phase', 'attr')
    read_tsv(x, col_names=gff_cols, na='.', col_types='ccciinccc')
}

split_models <- function(x){
    cds <- subset(x, type == "CDS")
    models <- factor(sub('.*Parent=([^;]+).*', '\\1', cds$attr))
    cds <- split(cds, models)
    lapply(cds, function(x) x[order(x$start), ])
}

@source sh
extract () {
    echo "bed=$1 genome=$2"
    # bedtools getfasta -fi $2 -bed $1 -fo /dev/stdout -s
}

merge () {
    cat $@
}

translate () {
    transeq -sequence $1 -outseq /dev/stdout
}
